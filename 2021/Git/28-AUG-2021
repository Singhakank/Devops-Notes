repo
|-.git (repository information)
  |-refs (heads-> branch(master) -> commithash)
  |-objects
    |-directory
      |-blob (commit files)

How does git stores and keep track the changes within the repository?
when we do git init in an empty directory git creates an .git hidden directory in which it maintains the repository (state) metadata. If we delete the .git directory we loose the repository.
  
Inside .git directory it will have a directory layout of
repository
|-.git
  |-refs
  |-objects
  |-logs
  |-info
objects = each commit we perform on the repository git takes the contents of the files we are commiting and computes the hashcode of it. then takes the first 2 characters of the hashvalue and creates an directory inside .git/objects and stores the contents of the files as blob with remaining 39 characters as filename.
refs = heads pointer pointing the latest commit
logs = the parent commit and the current commit history will be stored in logs
------------------------------------------------------------------------------------------------------
GIT Branch

branching is a technic through which we can keep track of the changes we are working for a feature separately, so that we can avoid breaking the mainline code for release.

scrum
|-sprint#1 (3 weeks) (21 days)
  |-5 developers, 5 features
    |- #1 developer - f1 - 5 days -> qa (git)
  
when we create a git repository by default git creates an default branch class master.
master = we keep the master copy of the repository which was last released into project.
develop = we create always a branch called develop from the master to start working for a release


repository
|-master
|-develop-2.0
  |-f1 (#1 developer) - qa (tested)->reported bugs->fix->certified -> merge the f1 into develop
  |-f2 (#2 developer) (7 days) -> qa (tested) -> merge f2 to develop
  |-f3 (#3 developer) (10 days) -> qa (tested) -> (product owner) rejected - dont merge into develop
  |-f4 (#4 developer) (15 days) -> qa (tested) -> merge f4 into develop
  |-f5 (#5 developer) (18 days) -> qa (tested) -> merge f5 into develop
|-rb-1.0
  
integration testing on develop code to certify all the features are working together. merge the develop into master, then cut the release branch from master and release the code into production.
  
git branch = will shows all the branches within the repository and points to the current branch we are in
git branch branchname = will creates an new branch from the existing branch we are in
git checkout branch = switch from one branch to another branch

git merge branch = merges the branch changes into the current branch you are in
git checkout -b branch = creates and switch to the branch
------------------------------------------------------------------------------------------------------
git stash

we are in middle of changes in a branch f1 and we want to switch to another branch f2. by default git will not allow you to switch from one branch to another while the commits are in pending.
So we can stash the changes of the f1 branch -> this will take all the changes we made in f1 into a temporary hashvalue and clean the f1 branch so that we can switch to f2

once we are back on f1 we can apply the stash using stashhash

git stash = will take out the working changes of a branch into temporary hashvalue
once we are back into the branch we can re-apply the changes using 
git stash apply = so that the last stash will be reapplied automatically
-----------------------------------------------------------------------------------------------------
how to merge changes of a branch into another?
There are 2 ways to achieve it in git repository
1. merge
2. rebase

merge (most of the time we use it and recommended)
scenario:1
= merge always either will fast-forward the branch to the new branch
#1. we cut the f1 branch from develop
#2. modified changes in f1
#3. commit the changes in f1
#4. now merge f1 to develop
  here as there are no other changes in develop-> simply develop will be fast-farwaded to f1
  


































































  
    
  
































  